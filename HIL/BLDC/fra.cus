<ui_settings>
    <version>2.6</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

]]></initialization_code>
    <components>
        <component_data>
                <id>30216bc0b1a811eb8f6c702084052ddc</id>
                <name><![CDATA[Frequency Response]]></name>
                <type>FrequencyResponse</type>
                <description><![CDATA[]]></description>
                <signal_selection>
                    <perturbing_source><![CDATA[V_p]]></perturbing_source>
                    <input_signal><![CDATA[vOut]]></input_signal>
                    <output_signals><![CDATA[['iL']]]></output_signals>
                </signal_selection>
                <frequency_vector>
                    <freq_vector_input_mode><![CDATA[Min/Max]]></freq_vector_input_mode>
                    <user_spec_freq_vector><![CDATA[[5000.0, 6316.0, 7632.0, 8947.0, 10263.0, 11579.0, 12895.0, 14211.0, 15526.0, 16842.0, 18158.0, 19474.0, 20789.0, 22105.0, 23421.0, 24737.0, 26053.0, 27368.0, 28684.0, 30000.0]]]></user_spec_freq_vector>
                    <min_freq><![CDATA[5000.0]]></min_freq>
                    <max_freq><![CDATA[40000.0]]></max_freq>
                    <num_of_freq_to_inject><![CDATA[300]]></num_of_freq_to_inject>
                    <spacing_of_freq_vector><![CDATA[Linear]]></spacing_of_freq_vector>
                </frequency_vector>
                <amplitude_and_phase>
                    <amp_phase_input_mode><![CDATA[User specified scalar]]></amp_phase_input_mode>
                    <user_spec_amp><![CDATA[60]]></user_spec_amp>
                    <user_spec_phase><![CDATA[0.0]]></user_spec_phase>
                    <amp_scale_factor><![CDATA[1.0]]></amp_scale_factor>
                </amplitude_and_phase>
                <model_identification>
                    <num_of_poles><![CDATA[2]]></num_of_poles>
                    <relative_degree_tf><![CDATA[0]]></relative_degree_tf>
                    <plot_pole_zero_map><![CDATA[False]]></plot_pole_zero_map>
                    <select_pole_zero_map><![CDATA[0]]></select_pole_zero_map>
                </model_identification>
                <data_parts>
                    <freq_response_data_path><![CDATA[C:/Users/ivan5/Desktop/HIL results/N16]]></freq_response_data_path>
                    <isg_files_path><![CDATA[C:/Users/ivan5/Desktop/HIL results/N16]]></isg_files_path>
                </data_parts>
                <waits_times>
                    <first_wait_time><![CDATA[1.0]]></first_wait_time>
                    <pre_acq_wait_mode><![CDATA[Frequency dependent]]></pre_acq_wait_mode>
                    <pre_acq_time><![CDATA[0.0]]></pre_acq_time>
                    <pre_acq_settling_period><![CDATA[10]]></pre_acq_settling_period>
                </waits_times>
                <advance_settings>
                    <multi_tone_freq_injection><![CDATA[False]]></multi_tone_freq_injection>
                    <additional_out_data_by_interpolation><![CDATA[False]]></additional_out_data_by_interpolation>
                    <num_of_additional_freq><![CDATA[20]]></num_of_additional_freq>
                    <range_of_additional_freq><![CDATA[[3.0, 20.0]]]></range_of_additional_freq>
                    <sampling_ratio><![CDATA[10]]></sampling_ratio>
                    <fft_res><![CDATA[0.5]]></fft_res>
                    <use_median_filter><![CDATA[False]]></use_median_filter>
                    <exclude_freq><![CDATA[False]]></exclude_freq>
                    <freq_to_exclude><![CDATA[[100.0, 1000.0]]]></freq_to_exclude>
                    <max_min_ratio_isg><![CDATA[900.0]]></max_min_ratio_isg>
                    <compensate_phase_loss><![CDATA[True]]></compensate_phase_loss>
                    <num_of_time_steps><![CDATA[1]]></num_of_time_steps>
                    <freq_response_plot_type><![CDATA[Bode plot]]></freq_response_plot_type>
                    <verbose><![CDATA[False]]></verbose>
                </advance_settings>
                <widget_settings>
                    <x>688</x>
                    <y>464</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a64cb414b2fb11ebba2e702084052ddc</id>
                <name><![CDATA[Vout]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[vOut]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>560.0</x>
                    <y>288.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ba76479fb2fb11eba118702084052ddc</id>
                <name><![CDATA[Vdc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[V_dc]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>824.0</x>
                    <y>288.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>cdb0ce10b2fb11eb90a3702084052ddc</id>
                <name><![CDATA[iL]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing value that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[iL]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>560.0</x>
                    <y>224.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9b3c169fb40011ebb100702084052ddc</id>
                <name><![CDATA[Input voltage]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[Change input DC voltage]]></description>
                <on_use_code active="True"><![CDATA[

# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

hil.set_source_constant_value('V_dc', value=inputValue)]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 400
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[400.0]]></inputValue>
                <min>0.0</min>
                <max>450.0</max>
                <step>10.0</step>
                <widget_settings>
                    <x>776.0</x>
                    <y>208.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>0d33d320b49711ebbbc0702084052ddc</id>
                <name><![CDATA[Text note]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Promeni Data Path Settings </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">pre nego sto pokrenes FRA,</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">inace zabaguje!</p></body></html>]]></text>
                <widget_settings>
                    <x>664.0</x>
                    <y>592.0</y>
                    <width>176</width>
                    <height>56</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position>1</hierarchy_position>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>89075589b57611ebae2c702084052ddc</id>
                <name><![CDATA[DC bias]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_source_constant_value('V_dc_bias',value=inputValue)
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.# NOTE: entered value is available through variable 'inputValue'
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-400.0</min>
                <max>400.0</max>
                <step>10.0</step>
                <widget_settings>
                    <x>1112.0</x>
                    <y>208.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fb5b312db58711eba517702084052ddc</id>
                <name><![CDATA[Perturbation amplitude]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_source_sine_waveform('V_p', rms=inputValue/1.41)
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.# NOTE: entered value is available through variable 'inputValue'
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>0.0</min>
                <max>60.0</max>
                <step>1.0</step>
                <widget_settings>
                    <x>1112.0</x>
                    <y>288.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>aaa35629b7bd11eb80d2702084052ddc</id>
                <name><![CDATA[perturbation frequency]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_source_sine_waveform('V_p', frequency=inputValue)
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.# NOTE: entered value is available through variable 'inputValue'
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0]]></inputValue>
                <min>0.0</min>
                <max>50000.0</max>
                <step>1000.0</step>
                <widget_settings>
                    <x>1120.0</x>
                    <y>360.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>